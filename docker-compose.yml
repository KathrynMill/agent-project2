version: '3.8'

services:
  # MySQL数据库
  mysql:
    image: mysql:8.0
    container_name: echo-command-mysql
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: echo_command
      MYSQL_USER: echo_user
      MYSQL_PASSWORD: echo_password
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./cloud/sql/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - echo-command-network

  # Redis缓存
  redis:
    image: redis:7-alpine
    container_name: echo-command-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - echo-command-network

  # Kafka消息队列
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: echo-command-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - echo-command-network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: echo-command-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    networks:
      - echo-command-network

  # 云端服务
  cloud-service:
    build:
      context: ./cloud
      dockerfile: Dockerfile
    container_name: echo-command-cloud
    depends_on:
      - mysql
      - redis
      - kafka
    ports:
      - "8080:8080"
    environment:
      DB_USERNAME: echo_user
      DB_PASSWORD: echo_password
      REDIS_HOST: redis
      KAFKA_SERVERS: kafka:9092
      JWT_SECRET: echo-command-secret-key-2024
    volumes:
      - ./cloud/logs:/app/logs
    networks:
      - echo-command-network

  # 本地后端服务
  local-backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: echo-command-backend
    ports:
      - "8000:8000"
    environment:
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      CLOUD_SERVICE_URL: http://cloud-service:8080/api
    volumes:
      - ./backend/logs:/app/logs
    networks:
      - echo-command-network

  # 前端应用
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: echo-command-frontend
    ports:
      - "3000:3000"
    depends_on:
      - local-backend
    networks:
      - echo-command-network

volumes:
  mysql_data:
  redis_data:

networks:
  echo-command-network:
    driver: bridge

